const OPCODES = Object.freeze({
	"unreachable": 0x00,
	"nop": 0x01,
	"block": 0x02,
	"loop": 0x03,
	"if": 0x04,
	"else": 0x05,
	// Exception handling proposal
	/*
	"try": 0x06,
	"catch": 0x07,
	"throw": 0x08,
	"rethrow": 0x09,
	"throw_ref": 0x0A,
	*/
	"end": 0x0B,
	"br": 0x0C,
	"br_if": 0x0D,
	"br_table": 0x0E,
	"return": 0x0F,
	"call": 0x10,
	"call_indirect": 0x11,
	// Tail calls proposal
	"return_call": 0x12,
	"return_call_indirect": 0x13,
	// Typed function references proposal
	/*
	"call_ref": 0x14,
	"return_call_ref": 0x15,
	*/
	// Exception handling proposal
	/*
	"delegate": 0x18,
	"catch_all": 0x19,
	*/
	"drop": 0x1A,
	"select": 0x1B,
	// Reference types proposal
	/*
	"select t": 0x1C,
	*/
	// Exception handling proposal
	/*
	"try_table": 0x1F,
	*/
	"local": Object.freeze({
		"get": 0x20,
		"set": 0x21,
		"tee": 0x22
	}),
	"global": Object.freeze({
		"get": 0x23,
		"set": 0x24
	}),
	"i32": Object.freeze({
		"load": 0x28,
		"load8_s": 0x2C,
		"load8_u": 0x2D,
		"load16_s": 0x2E,
		"load16_u": 0x2F,
		"store": 0x36,
		"store8": 0x3A,
		"store16": 0x3B,
		"const": 0x41,
		"eqz": 0x45,
		"eq": 0x46,
		"ne": 0x47,
		"lt_s": 0x48,
		"lt_u": 0x49,
		"gt_s": 0x4A,
		"gt_u": 0x4B,
		"le_s": 0x4C,
		"le_u": 0x4D,
		"ge_s": 0x4E,
		"ge_u": 0x4F,
		"clz": 0x67,
		"ctz": 0x68,
		"popcnt": 0x69,
		"add": 0x6A,
		"sub": 0x6B,
		"mul": 0x6C,
		"div_s": 0x6D,
		"div_u": 0x6E,
		"rem_s": 0x6F,
		"rem_u": 0x70,
		"and": 0x71,
		"or": 0x72,
		"xor": 0x73,
		"shl": 0x74,
		"shr_s": 0x75,
		"shr_u": 0x76,
		"rotl": 0x77,
		"rotr": 0x78,
		"wrap_i64": 0xA7,
		"trunc_f32_s": 0xA8,
		"trunc_f32_u": 0xA9,
		"trunc_f64_s": 0xAA,
		"trunc_f64_u": 0xAB,
		"reinterpret_f32": 0xBC,
		// Sign-extension operators extension
		"extend8_s": 0xC0,
		"extend16_s": 0xC1,
	}),
	"i64": Object.freeze({
		"load": 0x29,
		"load8_s": 0x30,
		"load8_u": 0x31,
		"load16_s": 0x32,
		"load16_u": 0x33,
		"load32_s": 0x34,
		"load32_u": 0x35,
		"store": 0x37,
		"store8": 0x3C,
		"store16": 0x3D,
		"store32": 0x3E,
		"const": 0x42,
		"eqz": 0x50,
		"eq": 0x51,
		"ne": 0x52,
		"lt_s": 0x53,
		"lt_u": 0x54,
		"gt_s": 0x55,
		"gt_u": 0x56,
		"le_s": 0x57,
		"le_u": 0x58,
		"ge_s": 0x59,
		"ge_u": 0x5A,
		"clz": 0x79,
		"ctz": 0x7A,
		"popcnt": 0x7B,
		"add": 0x7C,
		"sub": 0x7D,
		"mul": 0x7E,
		"div_s": 0x7F,
		"div_u": 0x80,
		"rem_s": 0x81,
		"rem_u": 0x82,
		"and": 0x83,
		"or": 0x84,
		"xor": 0x85,
		"shl": 0x86,
		"shr_s": 0x87,
		"shr_u": 0x88,
		"rotl": 0x89,
		"rotr": 0x8A,
		"extend_i32_s": 0xAC,
		"extend_i32_u": 0xAD,
		"trunc_f32_s": 0xAE,
		"trunc_f32_u": 0xAF,
		"trunc_f64_s": 0xB0,
		"trunc_f64_u": 0xB1,
		"reinterpret_f64": 0xBD,
		// Sign-extension operators extension
		"extend8_s": 0xC2,
		"extend16_s": 0xC3,
		"extend32_s": 0xC4
	}),
	"f32": Object.freeze({
		"load": 0x2A,
		"store": 0x38,
		"const": 0x43,
		"eq": 0x5B,
		"ne": 0x5C,
		"lt": 0x5D,
		"gt": 0x5E,
		"le": 0x5F,
		"ge": 0x60,
		"abs": 0x8B,
		"neg": 0x8C,
		"ceil": 0x8D,
		"floor": 0x8E,
		"trunc": 0x8F,
		"nearest": 0x90,
		"sqrt": 0x91,
		"add": 0x92,
		"sub": 0x93,
		"mul": 0x94,
		"div": 0x95,
		"min": 0x96,
		"max": 0x97,
		"copysign": 0x98,
		"convert_i32_s": 0xB2,
		"convert_i32_u": 0xB3,
		"convert_i64_s": 0xB4,
		"convert_i64_u": 0xB5,
		"demote_f64": 0xB6,
		"reinterpret_i32": 0xBE
	}),
	"f64": Object.freeze({
		"load": 0x2B,
		"store": 0x39,
		"const": 0x44,
		"eq": 0x61,
		"ne": 0x62,
		"lt": 0x63,
		"gt": 0x64,
		"le": 0x65,
		"ge": 0x66,
		"abs": 0x99,
		"neg": 0x9A,
		"ceil": 0x9B,
		"floor": 0x9C,
		"trunc": 0x9D,
		"nearest": 0x9E,
		"sqrt": 0x9F,
		"add": 0xA0,
		"sub": 0xA1,
		"mul": 0xA2,
		"div": 0xA3,
		"min": 0xA4,
		"max": 0xA5,
		"copysign": 0xA6,
		"convert_i32_s": 0xB7,
		"convert_i32_u": 0xB8,
		"convert_i64_s": 0xB9,
		"convert_i64_u": 0xBA,
		"promote_f32": 0xBB,
		"reinterpret_i64": 0xBF
	}),
	"memory": Object.freeze({
		"size": 0x3F,
		"grow": 0x40
	}),
	// Reference types proposal
	/*
	"table": Object.freeze({
		"get": 0x25,
		"set": 0x26
	}),
	"ref": Object.freeze({
		"null": 0xD0,
		"is_null": 0xD1,
		"func": 0xD2,
		"as_non_null": 0xD3,
		"br_on_null": 0xD4,
		"eq": 0xD5,
		"br_on_non_null": 0xD6
	})
	*/
});

export { OPCODES as default };
